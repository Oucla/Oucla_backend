
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EventOwnerScalarFieldEnum = {
  id: 'id',
  ownerType: 'ownerType',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  companyName: 'companyName',
  contactPerson: 'contactPerson',
  phoneNumber: 'phoneNumber',
  role: 'role',
  emailVerified: 'emailVerified',
  emailVerifyToken: 'emailVerifyToken',
  emailTokenExpiry: 'emailTokenExpiry',
  phoneVerified: 'phoneVerified',
  phoneVerifyCode: 'phoneVerifyCode',
  phoneCodeExpiry: 'phoneCodeExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  ownerId: 'ownerId',
  title: 'title',
  description: 'description',
  category: 'category',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  isVirtual: 'isVirtual',
  virtualType: 'virtualType',
  virtualUrl: 'virtualUrl',
  maxAttendees: 'maxAttendees',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VenueScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  name: 'name',
  description: 'description',
  layoutType: 'layoutType',
  createdAt: 'createdAt'
};

exports.Prisma.SectionScalarFieldEnum = {
  id: 'id',
  venueId: 'venueId',
  name: 'name'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  sectionId: 'sectionId',
  label: 'label',
  type: 'type',
  isBooked: 'isBooked'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  type: 'type',
  description: 'description',
  saleStart: 'saleStart',
  saleEnd: 'saleEnd',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketCategoryScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  name: 'name',
  price: 'price',
  quantity: 'quantity',
  soldQuantity: 'soldQuantity'
};

exports.Prisma.TicketInstanceScalarFieldEnum = {
  id: 'id',
  ticketId: 'ticketId',
  categoryId: 'categoryId',
  seatId: 'seatId',
  buyerId: 'buyerId',
  purchasedAt: 'purchasedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.OwnerType = exports.$Enums.OwnerType = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY'
};

exports.OwnerRole = exports.$Enums.OwnerRole = {
  INDIVIDUAL: 'INDIVIDUAL',
  COMPANY: 'COMPANY',
  PROMOTER: 'PROMOTER'
};

exports.TicketType = exports.$Enums.TicketType = {
  NORMAL: 'NORMAL',
  VR: 'VR',
  VIP: 'VIP'
};

exports.SeatType = exports.$Enums.SeatType = {
  NORMAL: 'NORMAL',
  VR: 'VR',
  VIP: 'VIP'
};

exports.VirtualType = exports.$Enums.VirtualType = {
  LIVE: 'LIVE',
  VR: 'VR',
  BOTH: 'BOTH'
};

exports.LayoutType = exports.$Enums.LayoutType = {
  FOOTBALL_STADIUM: 'FOOTBALL_STADIUM',
  CONFERENCE: 'CONFERENCE',
  SHOW: 'SHOW'
};

exports.Prisma.ModelName = {
  EventOwner: 'EventOwner',
  Event: 'Event',
  Venue: 'Venue',
  Section: 'Section',
  Seat: 'Seat',
  Ticket: 'Ticket',
  TicketCategory: 'TicketCategory',
  TicketInstance: 'TicketInstance'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/mac/Documents/DevWork/oucla/Oucla_backend/event-owner/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/mac/Documents/DevWork/oucla/Oucla_backend/event-owner/services/event-service/src/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../services/event-service/.env"
  },
  "relativePath": "../../../services/event-service/src/prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ========================\n// ENUMS\n// ========================\nenum OwnerType {\n  INDIVIDUAL\n  COMPANY\n}\n\nenum OwnerRole {\n  INDIVIDUAL\n  COMPANY\n  PROMOTER\n}\n\nenum TicketType {\n  NORMAL\n  VR\n  VIP\n}\n\nenum SeatType {\n  NORMAL\n  VR\n  VIP\n}\n\nenum VirtualType {\n  LIVE // Normal streaming\n  VR // VR streaming\n  BOTH // Both live and VR streaming\n}\n\nenum LayoutType {\n  FOOTBALL_STADIUM\n  CONFERENCE\n  SHOW\n}\n\n// ========================\n// MODELS\n// ========================\nmodel EventOwner {\n  id            String    @id @default(uuid())\n  ownerType     OwnerType\n  email         String    @unique\n  password      String\n  firstName     String?\n  lastName      String?\n  companyName   String?\n  contactPerson String?\n  phoneNumber   String?\n  role          OwnerRole @default(INDIVIDUAL)\n\n  emailVerified    Boolean   @default(false)\n  emailVerifyToken String?\n  emailTokenExpiry DateTime?\n\n  phoneVerified   Boolean   @default(false)\n  phoneVerifyCode String?\n  phoneCodeExpiry DateTime?\n\n  events Event[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Event {\n  id           String       @id @default(cuid())\n  owner        EventOwner   @relation(fields: [ownerId], references: [id])\n  ownerId      String\n  title        String\n  description  String?\n  category     String\n  location     String? // Required if physical\n  startDate    DateTime\n  endDate      DateTime\n  isVirtual    Boolean      @default(false)\n  virtualType  VirtualType? // Required if virtual or hybrid\n  virtualUrl   String? // Required if virtual or hybrid\n  maxAttendees Int?\n  createdAt    DateTime     @default(now())\n  updatedAt    DateTime     @updatedAt\n\n  venues  Venue[]\n  tickets Ticket[]\n}\n\nmodel Venue {\n  id          String     @id @default(cuid())\n  event       Event      @relation(fields: [eventId], references: [id])\n  eventId     String\n  name        String\n  description String?\n  layoutType  LayoutType\n  sections    Section[]\n  createdAt   DateTime   @default(now())\n}\n\nmodel Section {\n  id      String @id @default(cuid())\n  venue   Venue  @relation(fields: [venueId], references: [id])\n  venueId String\n  name    String\n  seats   Seat[]\n}\n\nmodel Seat {\n  id             String          @id @default(cuid())\n  section        Section         @relation(fields: [sectionId], references: [id])\n  sectionId      String\n  label          String\n  type           SeatType\n  isBooked       Boolean         @default(false)\n  ticketInstance TicketInstance?\n}\n\nmodel Ticket {\n  id          String     @id @default(cuid())\n  event       Event      @relation(fields: [eventId], references: [id])\n  eventId     String\n  type        TicketType\n  description String?\n  saleStart   DateTime\n  saleEnd     DateTime\n  isActive    Boolean    @default(true)\n  createdAt   DateTime   @default(now())\n  updatedAt   DateTime   @updatedAt\n\n  // For NORMAL tickets, define multiple categories\n  categories TicketCategory[]\n\n  // For VR or VIP tickets, buyers go directly to ticketInstances\n  ticketInstances TicketInstance[]\n}\n\nmodel TicketCategory {\n  id           String @id @default(cuid())\n  ticket       Ticket @relation(fields: [ticketId], references: [id])\n  ticketId     String\n  name         String // e.g., \"Regular\", \"Executive\", \"Table for 10\"\n  price        Float\n  quantity     Int\n  soldQuantity Int    @default(0)\n\n  ticketInstances TicketInstance[]\n}\n\nmodel TicketInstance {\n  id          String          @id @default(cuid())\n  ticket      Ticket          @relation(fields: [ticketId], references: [id])\n  ticketId    String\n  category    TicketCategory? @relation(fields: [categoryId], references: [id])\n  categoryId  String?\n  seat        Seat?           @relation(fields: [seatId], references: [id])\n  seatId      String?         @unique\n  buyerId     String?\n  purchasedAt DateTime?\n}\n",
  "inlineSchemaHash": "02bd7f4b079b6014bf96c2969079e35d2c9089970c547ec64a68da73c63c5f53",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"EventOwner\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ownerType\",\"kind\":\"enum\",\"type\":\"OwnerType\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companyName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactPerson\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"OwnerRole\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailVerifyToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailTokenExpiry\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"phoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"phoneVerifyCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneCodeExpiry\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToEventOwner\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Event\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"EventOwner\",\"relationName\":\"EventToEventOwner\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isVirtual\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"virtualType\",\"kind\":\"enum\",\"type\":\"VirtualType\"},{\"name\":\"virtualUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxAttendees\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"venues\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"EventToVenue\"},{\"name\":\"tickets\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"EventToTicket\"}],\"dbName\":null},\"Venue\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToVenue\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"layoutType\",\"kind\":\"enum\",\"type\":\"LayoutType\"},{\"name\":\"sections\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SectionToVenue\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Section\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"venue\",\"kind\":\"object\",\"type\":\"Venue\",\"relationName\":\"SectionToVenue\"},{\"name\":\"venueId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"seats\",\"kind\":\"object\",\"type\":\"Seat\",\"relationName\":\"SeatToSection\"}],\"dbName\":null},\"Seat\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"section\",\"kind\":\"object\",\"type\":\"Section\",\"relationName\":\"SeatToSection\"},{\"name\":\"sectionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"SeatType\"},{\"name\":\"isBooked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"ticketInstance\",\"kind\":\"object\",\"type\":\"TicketInstance\",\"relationName\":\"SeatToTicketInstance\"}],\"dbName\":null},\"Ticket\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"event\",\"kind\":\"object\",\"type\":\"Event\",\"relationName\":\"EventToTicket\"},{\"name\":\"eventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TicketType\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"saleStart\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"saleEnd\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"categories\",\"kind\":\"object\",\"type\":\"TicketCategory\",\"relationName\":\"TicketToTicketCategory\"},{\"name\":\"ticketInstances\",\"kind\":\"object\",\"type\":\"TicketInstance\",\"relationName\":\"TicketToTicketInstance\"}],\"dbName\":null},\"TicketCategory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ticket\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToTicketCategory\"},{\"name\":\"ticketId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"soldQuantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"ticketInstances\",\"kind\":\"object\",\"type\":\"TicketInstance\",\"relationName\":\"TicketCategoryToTicketInstance\"}],\"dbName\":null},\"TicketInstance\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ticket\",\"kind\":\"object\",\"type\":\"Ticket\",\"relationName\":\"TicketToTicketInstance\"},{\"name\":\"ticketId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"object\",\"type\":\"TicketCategory\",\"relationName\":\"TicketCategoryToTicketInstance\"},{\"name\":\"categoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"seat\",\"kind\":\"object\",\"type\":\"Seat\",\"relationName\":\"SeatToTicketInstance\"},{\"name\":\"seatId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"buyerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"purchasedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

