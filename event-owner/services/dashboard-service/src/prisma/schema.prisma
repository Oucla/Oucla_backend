generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================
// ENUMS
// ========================
enum OwnerType {
  INDIVIDUAL
  COMPANY
}

enum OwnerRole {
  INDIVIDUAL
  COMPANY
  PROMOTER
}

enum TicketType {
  NORMAL
  VR
  VIP
}

enum SeatType {
  NORMAL
  VR
  VIP
}

enum VirtualType {
  LIVE    // Normal streaming
  VR      // VR streaming
  BOTH    // Both live and VR streaming
}

enum LayoutType {
  FOOTBALL_STADIUM
  CONFERENCE
  SHOW
}

// ========================
// MODELS
// ========================
model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  fullName         String?
  emailVerified    Boolean   @default(false)
  emailVerifyToken String?
  emailTokenExpiry DateTime?
  otpVerified      Boolean   @default(false)
  otpVerifyCode    String?
  otpCodeExpiry  DateTime?

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}



model EventOwner {
  id               String    @id @default(uuid())
  ownerType        OwnerType
  email            String    @unique
  password         String
  firstName        String?
  lastName         String?
  companyName      String?
  contactPerson    String?
  phoneNumber      String?
  role             OwnerRole @default(INDIVIDUAL)

  emailVerified    Boolean   @default(false)
  emailVerifyToken String?
  emailTokenExpiry DateTime?

  phoneVerified    Boolean   @default(false)
  phoneVerifyCode  String?
  phoneCodeExpiry  DateTime?

  events           Event[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Event {
  id           String      @id @default(cuid())
  owner        EventOwner  @relation(fields: [ownerId], references: [id])
  ownerId      String
  title        String
  description  String?
  category     String
  location     String?          // Required if physical
  startDate    DateTime
  endDate      DateTime
  isVirtual    Boolean     @default(false)
  virtualType  VirtualType?       // Required if virtual or hybrid
  virtualUrl   String?            // Required if virtual or hybrid
  maxAttendees Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  venues       Venue[]
  tickets      Ticket[]
}

model Venue {
  id          String       @id @default(cuid())
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     String
  name        String
  description String?
  layoutType  LayoutType
  sections    Section[]
  createdAt   DateTime     @default(now())
}

model Section {
  id       String   @id @default(cuid())
  venue    Venue    @relation(fields: [venueId], references: [id])
  venueId  String
  name     String
  seats    Seat[]
}

model Seat {
  id        String           @id @default(cuid())
  section   Section          @relation(fields: [sectionId], references: [id])
  sectionId String
  label     String
  type      SeatType
  isBooked  Boolean          @default(false)
  ticketInstance TicketInstance?
}

model Ticket {
  id             String           @id @default(cuid())
  event          Event            @relation(fields: [eventId], references: [id])
  eventId        String
  type           TicketType
  description    String?
  saleStart      DateTime
  saleEnd        DateTime
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // For NORMAL tickets, define multiple categories
  categories     TicketCategory[]

  // For VR or VIP tickets, buyers go directly to ticketInstances
  ticketInstances TicketInstance[]
}

model TicketCategory {
  id            String           @id @default(cuid())
  ticket        Ticket           @relation(fields: [ticketId], references: [id])
  ticketId      String
  name          String           // e.g., "Regular", "Executive", "Table for 10"
  price         Float
  quantity      Int
  soldQuantity  Int              @default(0)

  ticketInstances TicketInstance[]
}

model TicketInstance {
  id          String            @id @default(cuid())
  ticket      Ticket            @relation(fields: [ticketId], references: [id])
  ticketId    String
  category    TicketCategory?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  seat        Seat?             @relation(fields: [seatId], references: [id])
  seatId      String? @unique
  buyerId     String?
  purchasedAt DateTime?
}
